# SPDX-License-Identifier: MIT
# Complete Raspberry Pi boot script with diagnostics

echo ""
echo "=== U-Boot Boot Info ==="
echo "upgrade_available = ${upgrade_available}"
echo "bootcount         = ${bootcount}"
echo "bootlimit         = ${bootlimit}"
echo "root_part         = ${root_part}"
echo "boot_part         = ${boot_part}"
echo "boot_devnum       = ${boot_devnum}"
echo "boot_devtype      = ${boot_devtype}"
echo "distro_bootpart   = ${distro_bootpart}"
echo "devtype           = ${devtype}"
echo "kernel_image      = ${kernel_image}"
echo "overlays_file     = ${overlays_file}"
echo "overlays_prefix   = ${overlays_prefix}"
echo "fitconf_fdt_overlays = ${fitconf_fdt_overlays}"
echo "fdtfile           = ${fdtfile}"
echo "fdt_file          = ${fdt_file}"
echo "altbootcmd        = ${altbootcmd}"
echo "rollback          = ${rollback}"
echo "========================"
echo ""

# Switch back
if test "${rollback}" = "1"; then
    if test "${devnum}" = "1"; then
        env set devnum 2
    else
        env set devnum 1
    fi
fi

# 1. Set useful defaults
test -n ${boot_part} || env set boot_part 1
test -n ${boot_devnum} || env set boot_devnum 0
test -n ${boot_devtype} || env set boot_devtype @@BOOT_MEDIA@@
test -n ${kernel_image} || env set kernel_image @@KERNEL_IMAGETYPE@@

# 2. Initialize USB if needed
if test ${boot_devtype} = "usb"; then
    echo "Starting USB subsystem..."
    usb start
fi

# 3. Construct a load command for convenience
if test ${boot_devtype} = "mmc" -o ${boot_devtype} = "usb"; then
    env set load_cmd "fatload ${boot_devtype} ${boot_devnum}:${boot_part}"
else
    echo "This script is not meant to boot from ${boot_devtype}."
    exit
fi

# 4. Build and print bootargs
fdt addr ${fdt_addr} && fdt get value bootargs /chosen bootargs
echo "Bootargs: ${bootargs}"

# 5. Load kernel
echo "Loading kernel image ${kernel_image}..."
if ${load_cmd} ${kernel_addr_r} ${kernel_image}; then
    echo "Kernel loaded to ${kernel_addr_r}"
else
    echo "ERROR: Kernel load failed!"
    exit
fi

# 6. Handle environment file
if test -e ${boot_devtype} ${boot_devnum}:${boot_part} uboot.env; then
    echo "uboot.env exists"
else
    echo "uboot.env missing, trying saveenv..."
    saveenv
    if test -e ${boot_devtype} ${boot_devnum}:${boot_part} uboot.env; then
        echo "uboot.env successfully created"
    else
        echo "uboot.env creation FAILED"
    fi
fi

# 7. Boot the kernel
echo ""
echo "========================"
echo "Booting kernel..."
echo "========================"
echo ""
@@KERNEL_BOOTCMD@@ ${kernel_addr_r} - ${fdt_addr}

